{"version":3,"sources":["components/Todo/Todo.js","components/Todo/TodoList.js","components/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","taskName","taskComplete","todo","todos","setTodos","className","onClick","map","item","task","complete","newList","filter","items","id","console","log","TodoList","filteredTodos","Form","inputText","setInputText","setFilterStatus","submitTextHandler","event","preventDefault","Math","floor","random","onSubmit","value","onChange","target","type","placeholder","App","useState","filterStatus","setFilteredTodos","useEffect","loadLocalStorage","filterTodos","saveLocalStorage","localStorage","getItem","undefined","setItem","JSON","stringify","parse","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6fe2b4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todo.css';\r\n\r\nconst Todo = ({ taskName, taskComplete, todo, todos, setTodos }) => {\r\n\tconst deleteHandler = () => {\r\n\t\t//Its creating a new list, its iterating through the array and removing the elements that equal todo.id filter-logic.png-\r\n\t\tconst newList = todos.filter((items) => items.id !== todo.id);\r\n\t\t//Setting the new list to the setTodos prop\r\n\t\tsetTodos(newList);\r\n\t\tconsole.log('Deleting task..');\r\n\t};\r\n\r\n\tconst completeHandler = () => {\r\n\t\t//Iterating array todos with map and if the name equals to the item task make the complete to opposite value\r\n\t\tsetTodos(\r\n\t\t\ttodos.map((item) => {\r\n\t\t\t\tif (item.task === todo.task) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...item,\r\n\t\t\t\t\t\tcomplete: !item.complete,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t}),\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li className=\"Todo list-group\">\r\n\t\t\t<i className=\"fa fa-pencil\"></i>\r\n\t\t\t<span className={taskComplete + ' item'}>{taskName}</span>\r\n\t\t\t<div className=\"actions\">\r\n\t\t\t\t<button onClick={completeHandler} className=\"complete-btn\">\r\n\t\t\t\t\t<i className=\"fa fa-check\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={deleteHandler} className=\"delete-btn\">\r\n\t\t\t\t\t<i className=\"fa fa-times\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport './TodoList.css';\r\n\r\n//Import Components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n\treturn (\r\n\t\t<div className=\"TodoList\">\r\n\t\t\t{/* Render Todos */}\r\n\t\t\t<ul className=\"List\">\r\n\t\t\t\t{filteredTodos.map((todo) => (\r\n\t\t\t\t\t<Todo\r\n\t\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\t\ttodos={todos}\r\n\t\t\t\t\t\tsetTodos={setTodos}\r\n\t\t\t\t\t\ttodo={todo}\r\n\t\t\t\t\t\ttaskName={todo.task}\r\n\t\t\t\t\t\ttaskComplete={todo.complete ? 'strike' : ''}\r\n\t\t\t\t\t\t// true = done, false = not done\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({\r\n\tinputText,\r\n\tsetInputText,\r\n\ttodos,\r\n\tsetTodos,\r\n\tsetFilterStatus,\r\n}) => {\r\n\t//Handling on any text changes\r\n\tconst inputTextHandler = (event) => {\r\n\t\tsetInputText(event.target.value);\r\n\t};\r\n\t//Handling on submit into todos prop (useState)\r\n\tconst submitTextHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetTodos([\r\n\t\t\t...todos,\r\n\t\t\t{\r\n\t\t\t\t// Do math random for id\r\n\t\t\t\tid: Math.floor(Math.random() * 100000),\r\n\t\t\t\ttask: inputText,\r\n\t\t\t\tcomplete: false,\r\n\t\t\t},\r\n\t\t]);\r\n\t\tsetInputText('');\r\n\t\tconsole.log('Adding a task');\r\n\t};\r\n\t// handler filter function for all,active,completed todos\r\n\tconst filterStatusHandler = (event) => {\r\n\t\tsetFilterStatus(event.target.value);\r\n\t};\r\n\r\n\t// handler delete function for deleting all todos lists\r\n\tconst deleteAllHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetTodos([]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"Form\">\r\n\t\t\t<form onSubmit={submitTextHandler}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t\tonChange={inputTextHandler}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"What needs to be done?\"\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={submitTextHandler} type=\"submit\">\r\n\t\t\t\t\t<i className=\"fa fa-plus\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t\t{/* Make a select box for All, Active, Completed */}\r\n\t\t\t\t<select className=\"Form__filterStatus\" onChange={filterStatusHandler}>\r\n\t\t\t\t\t<option value=\"all\">All</option>\r\n\t\t\t\t\t<option value=\"active\">Active</option>\r\n\t\t\t\t\t<option value=\"completed\">Completed</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t{/* trash button to clear all todos */}\r\n\t\t\t\t<button className=\"Form__trash\" onClick={deleteAllHandler}>\r\n\t\t\t\t\t<i className=\"fa fa-trash\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import Components\r\nimport TodoList from './components/Todo/TodoList';\r\nimport Form from './components/Form/Form';\r\n\r\nconst App = () => {\r\n\tconst [inputText, setInputText] = useState('');\r\n\tconst [todos, setTodos] = useState([]);\r\n\tconst [filterStatus, setFilterStatus] = useState('all');\r\n\tconst [filteredTodos, setFilteredTodos] = useState(todos);\r\n\r\n\t//run useEffect on page load and run the loadLocalStorage function to get data from localStorage\r\n\tuseEffect(() => {\r\n\t\tloadLocalStorage();\r\n\t}, []);\r\n\r\n\t//useEffect\r\n\tuseEffect(() => {\r\n\t\tfilterTodos(filterStatus);\r\n\t\tsaveLocalStorage();\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [filterStatus, todos]);\r\n\r\n\t//Functions\r\n\tconst filterTodos = (filter) => {\r\n\t\tswitch (filter) {\r\n\t\t\tcase 'active':\r\n\t\t\t\treturn setFilteredTodos(\r\n\t\t\t\t\ttodos.filter((todo) => todo.complete === false),\r\n\t\t\t\t);\r\n\t\t\tcase 'completed':\r\n\t\t\t\treturn setFilteredTodos(todos.filter((todo) => todo.complete === true));\r\n\t\t\tdefault:\r\n\t\t\t\treturn setFilteredTodos(todos);\r\n\t\t}\r\n\t};\r\n\r\n\t// Save to localStorage anf check if there is a storage already or not\r\n\tconst saveLocalStorage = () => {\r\n\t\t// check if the local storage has todos already or not\r\n\t\tif (\r\n\t\t\tlocalStorage.getItem('todos') === null ||\r\n\t\t\tlocalStorage.getItem('todos') === undefined\r\n\t\t) {\r\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\r\n\t\t}\r\n\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\r\n\t};\r\n\r\n\t// Load from localStorage\r\n\tconst loadLocalStorage = () => {\r\n\t\tconst todos = JSON.parse(localStorage.getItem('todos'));\r\n\t\tif (todos) {\r\n\t\t\tsetTodos(todos);\r\n\t\t}\r\n\t};\r\n\r\n\t//Render\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1 className=\"Header\">Todos App!ðŸ˜‚</h1>\r\n\t\t\t<Form\r\n\t\t\t\ttodos={todos}\r\n\t\t\t\tsetTodos={setTodos}\r\n\t\t\t\tinputText={inputText}\r\n\t\t\t\tsetInputText={setInputText}\r\n\t\t\t\tsetFilterStatus={setFilterStatus}\r\n\t\t\t/>\r\n\t\t\t<TodoList\r\n\t\t\t\tfilteredTodos={filteredTodos}\r\n\t\t\t\ttodos={todos}\r\n\t\t\t\tsetTodos={setTodos}\r\n\t\t\t/>\r\n\r\n\t\t\t{/* Project Description */}\r\n\t\t\t<div className=\"ProjectDescription\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tTodosApp is a simple todo list app made with React and Redux. It use\r\n\t\t\t\t\tReact Hooks to keep the state of the app.\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</p>\r\n\t\t\t\t<a href=\"https://github.com/daptheHuman/task-app\">\r\n\t\t\t\t\tSource Code\r\n\t\t\t\t\t<i className=\"fa fa-github\"></i>\r\n\t\t\t\t\tMade by daptheHuman\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Import font-awesome\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}